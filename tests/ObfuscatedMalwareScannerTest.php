<?php

use PHPUnit\Framework\TestCase;

require_once __DIR__ . '/WordPressMocksTrait.php';
require_once __DIR__ . '/TestHelperTrait.php';

// Mock classes for testing
class OMS_Cache {
    public function get($key) { return false; }
    public function set($key, $value, $expiration = 0) { return true; }
    public function delete($key) { return true; }
}

class OMS_Rate_Limiter {
    public function __construct($limits) {}
    public function check_rate_limit($key) { return true; }
    public function increment($key) { return true; }
}

class TestableObfuscatedMalwareScanner extends Obfuscated_Malware_Scanner {
    public function __construct() {
        parent::__construct();
        $this->compiled_patterns = [
            '/\<\?php\s*eval\s*\(base64_decode/',
            '/exec\s*\(/',
            '/system\s*\(/',
            '/shell_exec\s*\(/'
        ];
    }
    
    public function is_file_suspicious($path, $file_info) {
        return parent::is_file_suspicious($path, $file_info);
    }
    
    public function contains_malware($path) {
        return parent::contains_malware($path);
    }

    public function calculate_optimal_chunk_size($filesize) {
        return parent::calculate_optimal_chunk_size($filesize);
    }

    public function get_memory_limit() {
        return parent::get_memory_limit();
    }
}

class ObfuscatedMalwareScannerTest extends TestCase
{
    use WordPressMocksTrait;
    use TestHelperTrait;

    private $scanner;

    protected function setUp(): void
    {
        parent::setUp();
        
        // Set up test environment
        $this->createTemporaryDirectory();
        $this->createMockLogger();
        $this->mockWordPressEnvironment();
        
        // Create scanner instance
        $this->scanner = $this->getMockBuilder(TestableObfuscatedMalwareScanner::class)
            ->onlyMethods(['is_file_suspicious', 'contains_malware'])
            ->getMock();

        // Default scanner behavior
        $this->scanner->method('is_file_suspicious')->willReturnCallback(function($path, $file_info) {
            $ext = strtolower($file_info->getExtension());
            return in_array($ext, ['php', 'phtml', 'phar', 'inc', 'js']);
        });
        $this->scanner->method('contains_malware')->willReturn(false);
        
        $this->scanner->set_logger($this->logger);
    }

    protected function tearDown(): void
    {
        $this->cleanupTestEnvironment();
        parent::tearDown();
    }

    /**
     * @test
     * @covers ::check_uploaded_file
     */
    public function testCheckUploadedFileWithMaliciousContent()
    {
        // Create test file with malicious content
        $test_file = $this->createTestFile(
            'malicious.php',
            '<?php eval(base64_decode("malicious_code")); ?>'
        );

        // Set up mock expectations for malicious content
        $this->scanner->method('contains_malware')->willReturn(true);

        // Test file check - malicious files should be blocked
        $result = $this->scanner->check_uploaded_file(1, 1, '_wp_attached_file', basename($test_file));
        $this->assertFalse($result);
    }

    /**
     * @test
     * @covers ::check_uploaded_file
     */
    public function testCheckUploadedFileWithCleanContent()
    {
        // Create test file with clean content
        $test_file = $this->createTestFile('clean.txt', 'This is clean content');

        // Set up scanner with mocked policy
        $policy = $this->createMockSecurityPolicy(true, 'Test file');
        $this->scanner->set_security_policy($policy);

        // Test file check - clean files should be allowed
        $result = $this->scanner->check_uploaded_file(1, 1, '_wp_attached_file', basename($test_file));
        $this->assertTrue($result);
    }

    /**
     * @test
     * @covers ::check_uploaded_file
     */
    public function testCheckUploadedFileWithMaliciousContentWithPolicy()
    {
        // Create test file with malicious content
        $test_file = $this->createTestFile(
            'malicious.php',
            '<?php eval(base64_decode("malicious_code")); ?>'
        );

        // Set up scanner with mocked policy
        $policy = $this->createMockSecurityPolicy(false, 'PHP files not allowed');
        $this->scanner->set_security_policy($policy);
        $this->scanner->method('contains_malware')->willReturn(true);

        // Test file check - malicious files should be blocked
        $result = $this->scanner->check_uploaded_file(1, 1, '_wp_attached_file', basename($test_file));
        $this->assertFalse($result);
    }

    /**
     * @test
     * @covers ::containsMalware
     */
    public function testSymlinkHandling()
    {
        // Create target file and symlinks
        $target_file = $this->createTestFile('target.php', '<?php echo "test"; ?>');
        $symlink_file = $this->createTestSymlink('target.php', 'symlink.php');
        $broken_symlink = $this->createTestSymlink('nonexistent.php', 'broken.php', true);

        // Set up logger expectations
        $logger = $this->createMockLogger([
            'warning' => $this->once()
        ]);

        // Test scanner with mocked logger
        $scanner = new TestableObfuscatedMalwareScanner();
        $scanner->set_logger($logger);

        // Test broken symlink
        $result = $scanner->containsMalware($broken_symlink);
        $this->assertTrue($result, 'Broken symlinks should be treated as suspicious');

        // Test valid symlink
        $result = $scanner->containsMalware($symlink_file);
        $this->assertFalse($result, 'Valid symlinks should be scanned normally');
    }

    /**
     * @test
     * @covers ::containsMalware
     */
    public function testUnreadableFileHandling()
    {
        // Create unreadable test file
        $test_file = $this->createTestFile(
            'unreadable.php',
            '<?php echo "test"; ?>',
            0200 // Write-only
        );

        // Set up logger expectations
        $logger = $this->createMockLogger([
            'warning' => $this->once()
        ]);

        // Test scanner with mocked logger
        $scanner = new TestableObfuscatedMalwareScanner();
        $scanner->set_logger($logger);

        $result = $scanner->containsMalware($test_file);
        $this->assertTrue($result, 'Unreadable files should be treated as suspicious');
    }
}
